use twitter;

db.documents.count();

db.documents.createIndex({ "id_str": 1 }, { background: true, dropDups: true, unique: true })
db.documents.createIndex({ "user.screen_name": 1 }, { background: true, unique: false })

// For finding, dealing with sipper status documents.
db.documents.createIndex({ version: 1 }, { partialFilterExpression: { version: { $exists: true }}})

// How many geo-tagged.
db.documents.find({ "geo": { $ne: null } }).count()

// Status of all sippers.
db.documents.find({ "version": "0.09" }).map(d => { 
        return { 
            id_str: d.id_str,
            last: d.checkpoint_str, 
            tracking: d.captureExpression.track,
            captured: d.captured, 
            label: d.label,
            limitNotices: d.limitNotices,
            rate: d.rate[d.rate.length-1].r,
            next_heartbeat: d.next_heartbeat
        }; 
    });

// Rates for an individual sipper
db.documents.find({ 
    "version": "0.09", "id_str": "35ee2311-e935-488f-9ba0-1d8cf10bc61b" 
})[0].rate.map(rate => [rate.t, rate.r]);

// Export
mongoexport --db twitter --collection documents --out dump.json

// Find/remove duplicates if applicable.
echo "use twitter
db.documents.aggregate([
    { $group: {
        _id: { id_str: "$id_str" },
        dups: { "$push": "$_id" },
        count: { $sum: 1 }
        },
    },
    { $match: {
            count: { "$gt": 1 }
        }
    }
], { allowDiskUse: true }).forEach(function(doc) {
    doc.dups.shift();
    db.documents.remove({ "_id": {"$in": doc.dups }});
});

" | mongo > duplicates.txt 2>&1 & 